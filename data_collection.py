import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import ollama

class DataCollector:
    def __init__(self, equipment_type):
        """
        Initialize data collector for specific equipment type
        
        Args:
            equipment_type (str): Type of manufacturing equipment
        """
        self.equipment_type = equipment_type
        
        # Equipment-specific parameter ranges
        self.parameter_ranges = {
            "CNC Machine": {
                "Spindle Speed": (0, 10000),
                "Cutting Force": (0, 5000),
                "Tool Wear": (0, 100),
                "Temperature": (20, 120)
            },
            "Injection Molding Machine": {
                "Injection Pressure": (0, 2000),
                "Barrel Temperature": (100, 350),
                "Cooling Time": (0, 60),
                "Cycle Time": (0, 120)
            },
            "Robotic Assembly Line": {
                "Positioning Accuracy": (0, 0.1),
                "Cycle Speed": (0, 50),
                "Power Consumption": (0, 10),
                "Vibration": (0, 5)
            }
        }
    
    def generate_sensor_data(self, num_samples=100):
        """
        Generate realistic sensor data for the specified equipment type
        
        Args:
            num_samples (int): Number of data points to generate
        
        Returns:
            pd.DataFrame: Simulated sensor data
        """
        # Get parameter ranges for the equipment type
        ranges = self.parameter_ranges.get(self.equipment_type, {})
        
        # Generate timestamps
        timestamps = [datetime.now() - timedelta(minutes=x) for x in range(num_samples)]
        
        # Create data dictionary
        data = {'Timestamp': timestamps}
        
        # Generate data for each parameter
        for param, (min_val, max_val) in ranges.items():
            # Create base trend with some randomness
            base_trend = np.linspace(min_val, max_val, num_samples)
            noise = np.random.normal(0, (max_val - min_val) * 0.05, num_samples)
            data[param] = base_trend + noise
        
        return pd.DataFrame(data)
    
    def analyze_with_ollama(self, data):
        """
        Use Ollama Qwen model to provide insights on sensor data
        
        Args:
            data (pd.DataFrame): Sensor data to analyze
        
        Returns:
            str: Insights generated by Ollama Qwen model
        """
        try:
            # Convert data to a readable format
            data_summary = data.describe().to_string()
            
            # Prepare prompt for Ollama Qwen model
            prompt = f"""
            Analyze the following manufacturing equipment sensor data:
            Equipment Type: {self.equipment_type}
            
            Data Summary:
            {data_summary}
            
            Provide insights on:
            1. Potential performance issues
            2. Anomaly detection
            3. Recommended maintenance actions
            4. Potential optimization strategies
            """
            
            # Generate response using Ollama Qwen model
            response = ollama.chat(
                model='qwen2.5:1.5b ',
                messages=[{'role': 'user', 'content': prompt}]
            )
            
            return response['message']['content']
        
        except Exception as e:
            return f"Error in Ollama analysis: {str(e)}"